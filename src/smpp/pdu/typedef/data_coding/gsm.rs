// Copyright (c) 2022 GreenYun Organization
// SPDX-License-Identifier: MIT

use std::collections::HashMap;

use bitstream_io::{BitRead, BitReader, BitWrite, BitWriter, LittleEndian};

const REV_LOOKUP: [u32; 128] = [
    0x40, 0xA3, 0x24, 0xA5, 0xE8, 0xE9, 0xF9, 0xEC, 0xF2, 0xC7, 0x0A, 0xD8, 0xF8, 0x0D, 0xC5, 0xE5, 0x0394, 0x005F,
    0x03A6, 0x0393, 0x039B, 0x03A9, 0x03A0, 0x03A8, 0x03A3, 0x0398, 0x039E, 0x00A0, 0xC6, 0xE6, 0xDF, 0xC9, 0x20, 0x21,
    0x22, 0x23, 0xA4, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34,
    0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0xA1, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,
    0xC4, 0xD6, 0xD1, 0xDC, 0xA7, 0xBF, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D,
    0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xE4, 0xF6, 0xF1, 0xFC, 0xE0,
];

lazy_static::lazy_static! {
    static ref FORWARD_LOOKUP: HashMap<char, u8> = {
        let mut forward_lookup: HashMap<char, u8> = HashMap::new();
        REV_LOOKUP.into_iter().enumerate().for_each(|(i, u)| {
            #[allow(clippy::cast_possible_truncation)]
            forward_lookup.insert(char::from_u32(u).unwrap_or_default(), i as u8);
        });

        forward_lookup
    };
}

#[must_use]
pub fn decode(v: &[u8]) -> String {
    let mut dec = BitReader::endian(v, LittleEndian);
    let mut parsed = vec![];
    loop {
        let b = 7;
        let c = dec.read::<u8>(b);
        match c {
            Ok(c) => {
                parsed.push(c);
            }
            Err(_) => {
                break;
            }
        }
    }

    let s = parsed
        .into_iter()
        .filter_map(|u| char::from_u32(REV_LOOKUP[u as usize]))
        .collect::<String>();

    s.replace('\u{00A0}', "1)")
}

#[must_use]
pub fn encode(s: &str) -> Vec<u8> {
    let buf = vec![];
    let mut enc = BitWriter::endian(buf, LittleEndian);

    s.replace("1)", "\u{00A0}")
        .chars()
        .map(|c| FORWARD_LOOKUP.get(&c).copied().unwrap_or(0x20))
        .for_each(|u| {
            enc.write(7, u).unwrap_or_default();
        });

    while !enc.byte_aligned() {
        enc.write_bit(false).unwrap_or_default();
    }

    enc.into_writer()
}
